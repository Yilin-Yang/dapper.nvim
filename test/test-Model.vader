Include: MockMiddleTalker.vader

Execute (Model: Initialize):
  let g:model = dapper#model#Model#new(g:mock_mt, g:dapper_debug_logger)

Execute (Model: ...updates with started Threads from a ThreadEvent):
  let g:started_1 = {
      \ 'event': 'thread',
      \ 'vim_msg_typename': 'ThreadEvent',
      \ 'vim_id': 0,
      \ 'body': {
        \ 'threadId': 1,
        \ 'reason': 'started'
        \ },
      \ }
  call g:model.receive(g:started_1)
  let g:started_2 = {
      \ 'event': 'thread',
      \ 'vim_msg_typename': 'ThreadEvent',
      \ 'vim_id': 0,
      \ 'body': {
        \ 'threadId': 2,
        \ 'reason': 'started'
        \ },
      \ }
  call g:model.receive(g:started_2)
Then:
  let g:thread_1 = g:model.thread(1)
  AssertEqual 'unnamed', g:thread_1.name()
  AssertEqual 'started', g:thread_1.status()
  let g:thread_2 = g:model.thread(2)
  AssertEqual 'unnamed', g:thread_1.name()
  AssertEqual 'started', g:thread_1.status()

Execute (Model: ...should have sent a ThreadsRequest in response):
  AssertEqual 'threads', g:last_req[0]

Execute (Model: ...throws when asked for nonexistent threads):
  AssertThrows call g:model.thread(3)

Execute (Model: ...updates with exited Threads from a ThreadEvent):
  let g:started_1 = {
      \ 'event': 'thread',
      \ 'vim_msg_typename': 'ThreadEvent',
      \ 'vim_id': 0,
      \ 'body': {
        \ 'threadId': 1,
        \ 'reason': 'exited'
        \ },
      \ }
  call g:model.receive(g:started_1)
Then:
  let g:thread_1 = g:model.thread(1)
  AssertEqual 'unnamed', g:thread_1.name()
  AssertEqual 'exited', g:thread_1.status()

Execute (Model: ...updates all Threads from a ThreadsResponse):
  let g:response = {
      \ 'vim_msg_typename': 'ThreadsResponse',
      \ 'vim_id': 0,
      \ 'success': 1,
      \ 'command': 'threads',
      \ 'body': {
        \ 'threads': [
            \ {'id': 1, 'name': 'foo'},
            \ {'id': 2, 'name': 'bar'},
          \ ]
        \ },
      \ }
  call g:model.receive(g:response)
Then:
  let g:thread_1 = g:model.thread(1)
  AssertEqual 'foo', g:thread_1.name()
  AssertEqual 'exited', g:thread_1.status()
  let g:thread_2 = g:model.thread(2)
  AssertEqual 'bar', g:thread_1.name()
  AssertEqual 'started', g:thread_1.status()
