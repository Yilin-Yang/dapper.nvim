Include: MockMiddleTalker.vader

Execute (BreakpointsHandler: Setup):
  let g:handler = dapper#log#BreakpointsHandler#new(
      \ g:dapper_debug_logger, g:dapper_middletalker)
  call g:dapper_middletalker.Subscribe('Report', function('MockRec'))

Execute (BreakpointsHandler: No Breakpoints Set, But Successful):
  let g:msg = dapper#dap#Response#new()
  let g:msg['success'] = 1
  let g:msg['vim_id'] = 0
  let g:msg['vim_msg_typename'] = 'SetBreakpointsResponse'
  let g:msg['command'] = 'setBreakpoints'
  let g:msg['body'] = {'breakpoints': []}
  call g:dapper_middletalker.Receive(g:msg)
Then:
  Assert  MockReceived('StatusReport')
  Assert !MockReceived('ErrorReport')
  call MockCleanUp()

Execute (BreakpointsHandler: Breakpoints Set Successfully):
  let g:msg = dapper#dap#Response#new()

  let g:bp_good = dapper#dap#Breakpoint#new()
  let g:bp_good['verified'] = 1

  let g:msg['success'] = 1
  let g:msg['vim_id'] = 0
  let g:msg['vim_msg_typename'] = 'SetBreakpointsResponse'
  let g:msg['command'] = 'setBreakpoints'
  let g:msg['body'] = {'breakpoints': [g:bp_good]}
  call g:dapper_middletalker.Receive(g:msg)
Then:
  Assert  MockReceived('StatusReport')
  Assert !MockReceived('ErrorReport')
  call MockCleanUp()

Execute (BreakpointsHandler: One Breakpoint Not Verified):
  let g:msg = dapper#dap#Response#new()

  let g:bp_fail = dapper#dap#Breakpoint#new()
  let g:bp_fail['verified'] = 0

  let g:msg['success'] = 1
  let g:msg['vim_id'] = 0
  let g:msg['vim_msg_typename'] = 'SetBreakpointsResponse'
  let g:msg['command'] = 'setBreakpoints'
  let g:msg['body'] = {'breakpoints': [g:bp_fail, g:bp_good]}
  call g:dapper_middletalker.Receive(g:msg)
Then:
  Assert MockReceived('ErrorReport')
  call MockCleanUp()

Execute (BreakpointsHandler: Multiple Breakpoints Not Verified):
  let g:msg = dapper#dap#Response#new()

  let g:msg['success'] = 1
  let g:msg['vim_id'] = 0
  let g:msg['vim_msg_typename'] = 'SetBreakpointsResponse'
  let g:msg['command'] = 'setBreakpoints'
  let g:msg['body'] = {'breakpoints': [g:bp_fail, g:bp_good, g:bp_fail]}
  call g:dapper_middletalker.Receive(g:msg)
Then:
  Assert MockReceived('ErrorReport')
  call MockCleanUp()
