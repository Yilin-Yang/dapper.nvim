Execute (Promise: Set Up Helper Functions):
  function! Resolve(val) abort
    let g:resolved = a:val
  endfunction
  function! Reject(err) abort
    let g:rejected = a:err
  endfunction
  function! Reset() abort
    let g:resolved = 0
    let g:rejected = 0
    let g:another_resolved = 0
  endfunction
  call Reset()

Execute (Promise: Test Fulfillment, 'Pending' Status):
  let g:promise = dapper#Promise#new(function('Resolve'), function('Reject'))
  AssertEqual 'pending', g:promise.status()
  call g:promise.fulfill(42)
Then:
  AssertEqual 42, g:resolved
  AssertEqual 0,  g:rejected
  AssertEqual 'fulfilled', g:promise.status()
  call Reset()

Execute (Promise: Immediate Resolution):
  call g:promise.Subscribe(function('Resolve'), function('Reject'))
Then:
  AssertEqual 42, g:resolved
  AssertEqual 0,  g:rejected
  call Reset()

Execute (Promise: Unfulfillment):
  call g:promise.unfulfill()
  call g:promise.Subscribe(function('Resolve'), function('Reject'))
Then:
  AssertEqual 0, g:resolved
  AssertEqual 0,  g:rejected
  call Reset()

Execute (Promise: Test Subscription, Then Fulfillment):
  function! AnotherResolve(val) abort
    let g:another_resolved = a:val
  endfunction
  let g:promise = dapper#Promise#new(function('Resolve'), function('Reject'))
  call g:promise.Subscribe(function('AnotherResolve'))
  call g:promise.fulfill(24)
Then:
  AssertEqual 24, g:resolved
  AssertEqual 24, g:another_resolved
  AssertEqual 0,  g:rejected
  call Reset()

Execute (Promise: Test Broken Promise):
  let g:promise = dapper#Promise#new(function('Resolve'), function('Reject'))
  call g:promise.Subscribe(function('AnotherResolve'))
  call g:promise.break(24)
Then:
  AssertEqual 'broken', g:promise.status()
  AssertEqual 0, g:resolved
  AssertEqual 0, g:another_resolved
  AssertEqual 24,  g:rejected
  call Reset()

Execute (Promise: Test Immediate Rejection):
  call g:promise.Subscribe(function('AnotherResolve'), function('AnotherResolve'))
Then:
  AssertEqual 'broken', g:promise.status()
  AssertEqual 24, g:another_resolved
  call Reset()
