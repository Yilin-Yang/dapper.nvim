Execute (MiddleTalker: Set Up):
  let g:middletalker = dapper#MiddleTalker#Get()
  function! TestCbSingle(msg)
    let g:received = a:msg
    return 1
  endfunction

  function! TestCbList(msg)
    if !exists('g:received') || type(g:received) !=# v:t_list
      let g:received = []
    endif
    let g:received += [ a:msg ]
    return 1
  endfunction

  function! TestAltCbList(msg)
    if !exists('g:alt_received') || type(g:alt_received) !=# v:t_list
      let g:alt_received = []
    endif
    let g:alt_received += [a:msg]
    return 1
  endfunction

  ""
  " Construct a new DAP message. {type} is the "type" property;
  " ditto [vim_msg_typename] and [vim_id].
  " @default vim_msg_typename={type}
  " @default [vim_id]=0
  function! NewMessage(type, ...) abort
    let l:vim_msg_typename = get(a:000, 0, a:type)
    let l:vim_id = get(a:000, 1, 0)
    let l:new_msg = typevim#make#Instance(dapper#dap#ProtocolMessage())
    let l:new_msg.type = a:type
    let l:new_msg.vim_msg_typename = l:vim_msg_typename
    let l:new_msg.vim_id = l:vim_id
    return l:new_msg
  endfunction

Execute (MiddleTalker: Test VimifyMessage):
  let g:message = {
      \ 'seq': 0,
      \ 'type': 'event',
      \ 'event': ''
      \ }
  call g:middletalker.VimifyMessage(g:message)
  AssertEqual 'Event', g:message.vim_msg_typename,
      \ 'Failed on event vim_msg_typename'
  AssertEqual 0, g:message.vim_id,
      \ 'Failed on event vim_id'

  let g:message = {
      \ 'seq': 123,
      \ 'type': 'request',
      \ 'command': ''
      \ }
  call g:middletalker.VimifyMessage(g:message)
  AssertEqual 'Request', g:message.vim_msg_typename,
      \ 'Failed on request vim_msg_typename'
  AssertEqual 0, g:message.vim_id,
      \ 'Failed on request vim_id'

  let g:message = {
      \ 'seq': 123,
      \ 'type': 'response',
      \ 'command': ''
      \ }
  call g:middletalker.VimifyMessage(g:message)
  AssertEqual 'Response', g:message.vim_msg_typename,
      \ 'Failed on response vim_msg_typename'
  AssertEqual 0, g:message.vim_id,
      \ 'Failed on response vim_id'

  let g:message = {
      \ 'seq': 123,
      \ 'type': 'event',
      \ 'event': 'thread'
      \ }
  call g:middletalker.VimifyMessage(g:message)
  AssertEqual 'ThreadEvent', g:message.vim_msg_typename,
      \ 'Failed on ThreadEvent vim_msg_typename'
  AssertEqual 0, g:message.vim_id,
      \ 'Failed on ThreadEvent vim_id'

  let g:message = {
      \ 'seq': 0,
      \ 'type': 'response',
      \ 'command': 'terminateThreads',
      \ 'success': 1,
      \ 'vim_id': 123
      \ }
  call g:middletalker.VimifyMessage(g:message)
  AssertEqual 'TerminateThreadsResponse', g:message.vim_msg_typename,
      \ 'Failed on TerminateThreadsResponse vim_msg_typename'
  AssertEqual 123, g:message.vim_id,
      \ 'Failed on TerminateThreadsResponse vim_id'

Execute (MiddleTalker: Test Subscribe to Incoming):
  call g:middletalker.Subscribe('foo', function('TestCbSingle'))
  let g:will_match = NewMessage('foobar')
  call g:middletalker.Receive(g:will_match)
Then:
  AssertEqual g:will_match, g:received
  unlet g:received

Execute (MiddleTalker: Test Unsubscribe):
  call g:middletalker.Unsubscribe('foo', function('TestCbSingle'))
  call g:middletalker.Receive(g:will_match)
Then:
  Assert !exists('g:received')

Execute (MiddleTalker: Test Regex Subscription, Unsubscribe):
  let g:received = []
  call g:middletalker.Subscribe('.*', function('TestCbList'))
  let g:alphabet = NewMessage('ABCDEFGH')
  let g:will_match = NewMessage('foobar')
  call g:middletalker.Receive(g:will_match)
  call g:middletalker.Receive(g:alphabet)
Then:
  AssertEqual g:will_match, g:received[0]
  AssertEqual g:alphabet, g:received[1]
  call g:middletalker.Unsubscribe('.*', function('TestCbList'))
  unlet g:received

Execute (MiddleTalker: Test Won't Match):
  let g:wont_match = NewMessage('justbar')
  call g:middletalker.Receive(g:wont_match)
Then:
  Assert !exists('g:received')

Execute (MiddleTalker: Test Several Messages, Will/Won't Match):
  call g:middletalker.Subscribe('foo', function('TestCbList'))
  call g:middletalker.Receive(g:wont_match)

  call g:middletalker.Receive(g:will_match)
  call g:middletalker.Receive(g:will_match)

  call g:middletalker.Receive(g:wont_match)

  call g:middletalker.Receive(g:will_match)
Then:
  AssertEqual [g:will_match, g:will_match, g:will_match], g:received
  call g:middletalker.Unsubscribe('foo', function('TestCbList'))
  unlet g:received

Execute (MiddleTalker: Test Multiple Subscriptions):
  call g:middletalker.Subscribe('foob', function('TestAltCbList'))
  call g:middletalker.Subscribe('foo', function('TestCbList'))
  call g:middletalker.Subscribe('foo', function('TestCbList'))
  let g:will_match_first = NewMessage('foo')
  call g:middletalker.Receive(g:will_match)
  call g:middletalker.Receive(g:will_match_first)
  call g:middletalker.Receive(g:wont_match)
Then:
  AssertEqual [g:will_match, g:will_match,
      \ g:will_match_first, g:will_match_first], g:received
  AssertEqual [g:will_match], g:alt_received
