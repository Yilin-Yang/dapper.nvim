Execute (Buffer: Construct Default):
  let g:buffer = dapper#Buffer#new()
  call g:buffer.open()
Then:
  AssertEqual 'hide',   &bufhidden
  AssertEqual 0,        &buflisted
  AssertEqual 'nofile', &buftype
  AssertEqual 0,        &swapfile

Execute (Buffer: Set Buffer Variable):
  let g:buffer = dapper#Buffer#new()
  call g:buffer.setbufvar('test_var', 1)
  call g:buffer.open()
Then:
  AssertEqual 1, b:test_var

Execute (Buffer: Get Buffer Variable):
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')
  AssertEqual 1, g:buffer.getbufvar('test_var')

" Since split moves the cursor to the new split, check relative position by
" moving *back* to the original window and checking that it *isn't* the owned
" buffer.
Execute (Buffer: Open Horizontal Split):
  buffer 1
  call g:buffer.split('', 'botright')
Then:
  wincmd k
  Assert !exists('b:test_var')

Execute (Buffer: Open Vertical Split):
  buffer 1
  call g:buffer.vsplit('', 'botright')
Then:
  wincmd h
  Assert !exists('b:test_var')

Execute (Buffer: Wipeout Buffer):
  let g:bufnr = g:buffer.bufnr()
  AssertEqual g:bufnr, g:buffer.setBuffer(bufnr('%'), 'bwipeout')

Given (Ten Lines of Text):
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: Delete Buffer Contents):
  call g:buffer.setBuffer(bufnr('%'))
  call g:buffer.deleteLines(0, 5)
Expect:
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: Delete Everything):
  call g:buffer.setBuffer(bufnr('%'))
  call g:buffer.deleteLines(0, -1)
Expect:
  

Execute (Buffer: Replace Buffer Contents):
  call g:buffer.setBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.replaceLines(0, 5, g:lines)
Expect:
  foo1
  foo2
  foo3
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: Replace Last Lines):
  call g:buffer.setBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.replaceLines(6, -1, g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  foo1
  foo2
  foo3

Execute (Buffer: Replace Everything):
  call g:buffer.setBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.replaceLines(0, -1, g:lines)
Expect:
  foo1
  foo2
  foo3

Execute (Buffer: Insert Lines):
  call g:buffer.setBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.insertLines(0, g:lines)
Expect:
  foo1
  foo2
  foo3
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: Insert Lines At End):
  call g:buffer.setBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.insertLines(-1, g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
  foo1
  foo2
  foo3
