Include: AwaitTimeout.vader
Include: StartMockDebugAdapter.vader
Include: SubscriptionHelpers.vader

Execute (VariableLookup: Setup):
  let g:timeout_len = 4000  " ms
  call AwaitTimeout({ -> ReceivedMessage('LaunchResponse')}, g:timeout_len, 1)

  call g:dapper_model.Update()
  call AwaitTimeout({ -> ReceivedMessage('ThreadsResponse')}, g:timeout_len, 1)

  " receive thread 1; get topmost stack frame
  let g:thread = g:dapper_model.thread(1)
  let g:st = AwaitPromise(g:thread.stackTrace(), g:timeout_len, 1)
  let g:sf = AwaitPromise(g:st.frame(0), g:timeout_len, 1)

  let g:vl = dapper#model#VariableLookup#New(g:dapper_middletalker, g:sf)

Execute (VariableLookup: Nonexistent Scope):
  AssertThrows call g:vl.VariableFromPath(['Locl'])
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(NotFound)'),
      \ 'Threw wrong exception: ' . g:vader_exception
  let g:vader_exception = ''

Execute (VariableLookup: Retrieve Local Scope):
  let g:scope = AwaitPromise(g:vl.VariableFromPath(['Local']), g:timeout_len, 1)
  AssertEqual 'Local', g:scope.name()

Execute (VariableLookup: Nonexistent Local Variable):
  " complicated try/catch to handle the possibility that the Promise might
  " reject asynchronously, and return the rejection from AwaitPromise,
  " OR fail immediately
  try
    let g:vader_exception =
        \ AwaitPromise(g:vl.VariableFromPath(['Local', 'locl_0_i']), g:timeout_len, 1)
  catch
    let g:vader_exception = v:exception
  finally
    if len(v:exception) | let g:vader_exception = v:exception | endif
    AssertNotEqual -1, match(g:vader_exception, 'Did not find variable'),
        \ 'Threw wrong exception: ' . g:vader_exception
  endtry

Execute (VariableLookup: Retrieve Local Variable):
  let g:var = AwaitPromise(g:vl.VariableFromPath(['Local', 'local_0_i']), g:timeout_len, 1)
  AssertEqual 'local_0_i', g:var.name()
  AssertEqual '123', g:var.value()
Then (Retrieve Local Structured Variable):
  let g:var = AwaitPromise(g:vl.VariableFromPath(['Local', 'local_0_o']), g:timeout_len, 1)
  AssertEqual 'local_0_o', g:var.name()

Execute (VariableLookup: Original Lookup Path Unmodified by Lookup):
  let g:lookup_path = ['Local']
  let g:orig_lookup_path = copy(g:lookup_path)
  let g:scope =
      \ AwaitPromise(g:vl.VariableFromPath(g:lookup_path), g:timeout_len, 1)
  AssertEqual g:orig_lookup_path, g:lookup_path

  let g:lookup_path = ['Local', 'local_0_i']
  let g:orig_lookup_path = copy(g:lookup_path)
  let g:scope =
      \ AwaitPromise(g:vl.VariableFromPath(g:lookup_path), g:timeout_len, 1)
  AssertEqual g:orig_lookup_path, g:lookup_path

Execute (VariableLookup: Retrieve Nested Global Variable):
  let g:var = AwaitPromise(
      \ g:vl.VariableFromPath(
          \ ['Global', 'global_0_o', 'object__o', 'object__f']), g:timeout_len, 1)
  AssertEqual 'object__f', g:var.name()
  AssertEqual '3.14', g:var.value()
  AssertEqual 'float', g:var.type()
