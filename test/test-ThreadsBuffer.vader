Include: MockMiddleTalker.vader

Execute (ThreadsBuffer: Construct, Initialize; Test Subscription):
  let g:model = dapper#model#Model#new(g:mock_mt)
  let g:tb = dapper#view#ThreadsBuffer#new(g:model, g:mock_mt)
Then:
  AssertEqual function(g:tb.receive), g:last_sub[1]
  " TODO check other subscriptions?
  AssertNotEqual -1, match(g:last_sub[0], 'Thread')

Execute (ThreadsBuffer: Receive ThreadEvent, started):
  let g:msg = dapper#dap#Event#new(0, 'ThreadEvent')
  let g:msg['event'] = 'ThreadEvent'
  let g:msg['body'] = {'threadId': 123, 'reason': 'started'}
  call g:model.receive(g:msg)
  call g:tb.receive(g:msg)
  call g:tb.open()
Expect:
  thread	id: 123	name: unnamed	status: started
  
Execute (ThreadsBuffer: New Thread Started):
  let g:msg = dapper#dap#Event#new(0, 'ThreadEvent')
  let g:msg['event'] = 'ThreadEvent'
  let g:msg['body'] = {'threadId': 789, 'reason': 'started'}
  call g:model.receive(g:msg)
  call g:tb.receive(g:msg)
  call g:tb.open()
Expect:
  thread	id: 789	name: unnamed	status: started
  thread	id: 123	name: unnamed	status: started
  
Execute (ThreadsBuffer: Thread Exited):
  let g:msg = dapper#dap#Event#new(0, 'ThreadEvent')
  let g:msg['event'] = 'ThreadEvent'
  let g:msg['body'] = {'threadId': 789, 'reason': 'exited'}
  call g:model.receive(g:msg)
  call g:tb.receive(g:msg)
  call g:tb.open()
Expect:
  thread	id: 789	name: unnamed	status: exited
  thread	id: 123	name: unnamed	status: started
  
Execute (ThreadsBuffer: Update With ThreadsResponse):
  let g:msg = dapper#dap#Response#new(0, 'ThreadsResponse')
  let g:msg['command'] = 'threads'
  let g:msg['success'] = v:true
  let g:msg['body'] = {'threads': [
    \ {'id': 123, 'name': 'foo'},
    \ {'id': 789, 'name': 'bar'},
  \ ]}
  call g:model.receive(g:msg)
  call g:tb.receive(g:msg)
  call g:tb.open()
Expect:
  thread	id: 789	name: bar	status: exited
  thread	id: 123	name: foo	status: started
  
Execute (ThreadsBuffer: Dig Down into StackTraceBuffer):
  normal! gg
  execute "normal \<cr>"
Expect:
  (0) [NO]  (l:8, c:0)  The
  (1) [NO]  (l:8, c:0)  word
  (2) [NO]  (l:8, c:0)  `exception`
  (3) [NO]  (l:8, c:0)  causes
  (4) [NO]  (l:8, c:0)  the
  (5) [NO]  (l:8, c:0)  mock
  (6) [NO]  (l:8, c:0)  debugger
  (7) [NO]  (l:8, c:0)  to
  (8) [NO]  (l:8, c:0)  stop,
  (9) [NO]  (l:8, c:0)  due
  (10) [NO]  (l:8, c:0)  to
  (11) [NO]  (l:8, c:0)  an
  (12) [NO]  (l:8, c:0)  "exception".

Execute (ThreadsBuffer: Cleanup):
  call g:tb.open()
  call MockCleanUp()
  normal! ggVGd
  unlet g:tb
