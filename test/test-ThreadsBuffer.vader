Include: MockMiddleTalker.vader

Execute (ThreadsBuffer: Construct, Initialize):
  let g:model = dapper#model#Model#New(g:mock_mt)
  let g:tb = dapper#view#ThreadsBuffer#New(g:model, g:mock_mt)

Execute (ThreadsBuffer: Receive ThreadEvent, started):
  let g:msg = dapper#dap#Event#New('thread', {'threadId': 123, 'reason': 'started'})
  call g:model.Receive(g:msg)
  call g:tb.Push(g:model.threads(1))
  call g:tb.Open()
Expect:
  <threads>
  thread id: 123	name: unnamed		status: started
  </threads>

Execute (ThreadsBuffer: New Thread Started):
  let g:msg = dapper#dap#Event#New('thread', {'threadId': 789, 'reason': 'started'})
  call g:model.Receive(g:msg)
  call g:tb.Push(g:model.threads(1))
  call g:tb.Open()
Expect:
  <threads>
  thread id: 123	name: unnamed		status: started
  thread id: 789	name: unnamed		status: started
  </threads>

Execute (ThreadsBuffer: Thread Exited):
  let g:msg = dapper#dap#Event#New('thread', {'threadId': 789, 'reason': 'exited'})
  call g:model.Receive(g:msg)
  call g:tb.Push(g:model.threads(1))
  call g:tb.Open()
Expect:
  <threads>
  thread id: 123	name: unnamed		status: started
  thread id: 789	name: unnamed		status: exited
  </threads>

Execute (ThreadsBuffer: Update With ThreadsResponse):
  let g:msg = dapper#dap#Response#New(
      \ 1, 'threads', {'threads': [
      \ {'id': 123, 'name': 'foo'},
      \ {'id': 789, 'name': 'bar'},
      \ ]})
  call g:model.Receive(g:msg)
  call g:tb.Open()
  " note: exited thread should be highlighted
Expect:
  <threads>
  thread id: 789	name: bar		status: exited
  thread id: 123	name: foo		status: started
  </threads>

Execute (ThreadsBuffer: Cleanup):
  call g:tb.Open()
  call MockCleanUp()
  normal! ggVGd
  unlet g:tb
