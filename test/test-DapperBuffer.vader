Include: MockMiddleTalker.vader

" Test 'hand-off' between DapperBuffer types, using ThreadsBuffer and
" StackTraceBuffer as test types.
Execute (DapperBuffer: Set Up (if this fails, further tests will fail):
  let g:model = dapper#model#Model#New(g:mock_mt)
  let g:tb = dapper#view#ThreadsBuffer#New(g:model, g:mock_mt)

  let g:msg = dapper#dap#Event#New('thread', {'threadId': 123, 'reason': 'started'})
  call g:model.Receive(g:msg)
  call g:tb.Push(g:model.threads(1))

  let g:msg = dapper#dap#Event#New('thread', {'threadId': 789, 'reason': 'started'})
  call g:model.Receive(g:msg)
  call g:tb.Push(g:model.threads(1))

  call g:tb.Open()
Expect:
  <threads>
  thread id: 123	name: unnamed		status: started
  thread id: 789	name: unnamed		status: started
  </threads>

Do (DapperBuffer: Test Creation of New Buffer):
  :call g:tb.Open()\<cr>
  gg\<cr>
Then:
  Assert exists('b:dapper_buffer'), 'Could not find buffer-local StackTraceBuffer'
  call typevim#ensure#IsType(b:dapper_buffer, 'StackTraceBuffer')
  AssertEqual 123, b:dapper_buffer.thread().id()
  let g:child = b:dapper_buffer
  let g:child_bufnr = b:dapper_buffer.bufnr()

Do (DapperBuffer: Return to Parent):
  :call g:child.Open()\<cr>
  \<esc>
Then:
  Assert exists('b:dapper_buffer'), 'Could not find buffer-local ThreadsBuffer'
  call typevim#ensure#IsType(b:dapper_buffer, 'ThreadsBuffer')

Do (DapperBuffer: Test Open Different in Existing Child):
  :call g:tb.Open()\<cr>
  j\<cr>
Then:
  Assert exists('b:dapper_buffer'), 'Could not find buffer-local StackTraceBuffer'
  call typevim#ensure#IsType(b:dapper_buffer, 'StackTraceBuffer')
  AssertEqual 789, b:dapper_buffer.thread().id()
  AssertEqual g:child_bufnr, b:dapper_buffer.bufnr()
  execute "normal \<esc>"

Execute (DapperBuffer: Test Move to Existing Window):
  call g:tb.Open()
  let g:tb_winnr = winnr()
  " if vsplit opens left, then g:child will assume winnr 1
  botright vsplit
  call g:child.Open()
  let g:ch_winnr = winnr()
  wincmd p
  execute "normal gg\<cr>"
Then:
  call typevim#ensure#IsType(b:dapper_buffer, 'StackTraceBuffer')
  AssertNotEqual g:tb_winnr, winnr()
  execute "normal \<esc>"
  call typevim#ensure#IsType(b:dapper_buffer, 'ThreadsBuffer')
  AssertEqual g:tb_winnr, winnr()
  execute g:child.Switch()
  close

Execute (DapperBuffer: Test Move to Existing Window in Different Tab):
  tabnew
  call g:child.Open()
  let g:tabnr = tabpagenr()
  tabprevious
  call g:tb.Open()
  execute "normal gg\<cr>"
Then:
  call typevim#ensure#IsType(b:dapper_buffer, 'StackTraceBuffer')
  AssertEqual 123, b:dapper_buffer.thread().id()
  AssertEqual g:tabnr, tabpagenr()

Execute (DapperBuffer: Test Existing Child, Not Open in Any):
  tabnext
  tabclose
  while len(tabpagebuflist()) ># 1
    quit
  endwhile
  let g:tabnr = tabpagenr()
  call g:tb.Open()
  execute "normal gg\<cr>"
Then:
  call typevim#ensure#IsType(b:dapper_buffer, 'StackTraceBuffer')
  AssertEqual 123, b:dapper_buffer.thread().id()
  AssertEqual g:tabnr, tabpagenr()

Execute (ThreadsBuffer: Cleanup):
  call MockCleanUp()
  let g:thread_bufnr = g:tb.bufnr()
  let g:child_bufnr = g:child.bufnr()
  Assert bufexists(g:thread_bufnr),
      \ 'ThreadsBuffer stopped existing before cleanup?'
  Assert bufexists(g:child_bufnr),
      \ 'StackTraceBuffer stopped existing before cleanup?'
  call g:tb.CleanUp()
  call g:child.CleanUp()
  " unlet g:tb
  " unlet g:child
Then:
  Assert !bufexists(g:thread_bufnr),
      \ 'ThreadsBuffer did not clean up properly! (Buffer still exists!)'
  Assert !bufexists(g:child_bufnr),
      \ 'StackTraceBuffer did not clean up properly! (Buffer still exists!)'
