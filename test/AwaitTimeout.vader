" NOTE: It's recommended that this file be used in conjunction with
"     `SubscriptionHelpers.vader`.
Execute (AwaitTimeout: Declare Helper Functions):

  ""
  " Returns the number of seconds since the time marked by {reltime}, a time
  " point returned by `reltime()`. as a float.
  function! TimeSince(reltime) abort
    let l:diff = reltime(a:reltime, reltime())
    return reltimefloat(l:diff)
  endfunction

  ""
  " Loop until {Condition} returns true, or {timeout} ms have passed.
  "
  " [should_throw] should be true if an exception should be thrown on timeout.
  "
  " [resolution]  How long to wait before checking the condition on a given
  " iteration, in milliseconds. When set too low, nvim will be stuck
  " busy-looping when events occur, and may not respond to calls from remote
  " plugins.
  function! AwaitTimeout(Condition, timeout, ...) abort
    call maktaba#ensure#IsFuncref(a:Condition)
    call maktaba#ensure#IsNumber(a:timeout)
    let l:should_throw = typevim#ensure#IsBool(get(a:000, 0, 0))
    let l:resolution = maktaba#ensure#IsNumber(get(a:000, 1, 100))

    let l:start = reltime()
    let l:sec = a:timeout / 1000.0
    let l:timed_out = 1
    while TimeSince(l:start) <# l:sec
      if a:Condition()
        let l:timed_out = 0
        break
      endif
      execute 'sleep '.l:resolution.'m'
    endwhile
    if l:timed_out && l:should_throw
      throw '(AwaitTimeout) Timed out while waiting for event.'
    endif
    " add an additional sleep statement, to give Promises the chance
    " to call back
    execute 'sleep '.l:resolution.'m'
  endfunction

  ""
  " @usage {promise} {timeout} [should_throw] [resolution]
  " Loop until {promise} is no longer pending, or {timeout} ms have passed.
  " Returns the value of the Promise, whether it resolved or rejected.
  function! AwaitPromise(promise, timeout, ...) abort
    let l:should_throw = get(a:000, 0, 0)
    let l:resolution = get(a:000, 1, 100)

    call typevim#ensure#IsType(a:promise, 'Promise')
    call AwaitTimeout(
        \ { -> a:promise.State() !=# 'pending'},
        \ a:timeout, l:should_throw, l:resolution)
    return a:promise.Get()
  endfunction

  ""
  " @usage {num_iterations} [time]
  " Run through multiple |:sleep| statements, so that a multi-level Promise
  " chain could resolve.
  function! BusyWait() abort
    " TODO add actual function arguments to this
    let l:i = 0
    while l:i <# 3
      sleep 100m
      let l:i += 1
    endwhile
  endfunction
