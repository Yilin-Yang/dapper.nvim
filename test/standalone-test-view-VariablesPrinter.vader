Include: AwaitTimeout.vader
Include: StartMockDebugAdapter.vader

Execute (VariablesPrinter: Parse Structured Variable):
  let g:parsed = dapper#view#VariablesPrinter#VariableFromString(
      \ '  v quoz, Foo, {class}:')
  AssertEqual {
      \ 'indentation': '  ',
      \ 'expanded': 1,
      \ 'unstructured': 0,
      \ 'name': 'quoz',
      \ 'type': 'Foo',
      \ 'presentation_hint': '{class}',
      \ 'value': '',
      \ }, g:parsed

Execute (VariablesPrinter: Parse Unstructured Variable):
  let g:parsed = dapper#view#VariablesPrinter#VariableFromString(
      \ '  - foo, int: 123')
  AssertEqual {
      \ 'indentation': '  ',
      \ 'expanded': 0,
      \ 'unstructured': 1,
      \ 'name': 'foo',
      \ 'type': 'int',
      \ 'presentation_hint': '',
      \ 'value': '123',
      \ }, g:parsed

Execute (VariablesPrinter: Parse Hinted Unstructured Variable):
  let g:parsed = dapper#view#VariablesPrinter#VariableFromString(
      \ '    - foo_, int, {property}: 456' )
  AssertEqual {
      \ 'indentation': '    ',
      \ 'expanded': 0,
      \ 'unstructured': 1,
      \ 'name': 'foo_',
      \ 'type': 'int',
      \ 'presentation_hint': '{property}',
      \ 'value': '456',
      \ }, g:parsed

Execute (VariablesPrinter: Parse Hinted Unstructured String Variable):
  let g:parsed = dapper#view#VariablesPrinter#VariableFromString(
    \ '    - bar_, string, {property}: "hello, world"')
  AssertEqual {
      \ 'indentation': '    ',
      \ 'expanded': 0,
      \ 'unstructured': 1,
      \ 'name': 'bar_',
      \ 'type': 'string',
      \ 'presentation_hint': '{property}',
      \ 'value': '"hello, world"',
      \ }, g:parsed

Execute (VariablesPrinter: Parse String Variable w/ Misinterpretable Contents):
  let g:parsed = dapper#view#VariablesPrinter#VariableFromString(
    \ '    - bar_, string: "{garble},:"')
  AssertEqual {
      \ 'indentation': '    ',
      \ 'expanded': 0,
      \ 'unstructured': 1,
      \ 'name': 'bar_',
      \ 'type': 'string',
      \ 'presentation_hint': '',
      \ 'value': '"{garble},:"',
      \ }, g:parsed

Execute (VariablesPrinter: Parse String Variable Holding The Line It's In):
  let g:parsed = dapper#view#VariablesPrinter#VariableFromString(
    \ '    - bar_, string: "    - bar_, string: "{garble},:""')
  AssertEqual {
      \ 'indentation': '    ',
      \ 'expanded': 0,
      \ 'unstructured': 1,
      \ 'name': 'bar_',
      \ 'type': 'string',
      \ 'presentation_hint': '',
      \ 'value': '"    - bar_, string: "{garble},:""',
      \ }, g:parsed

Execute (VariablesPrinter: Parse Bare Scope):
  let g:parsed = dapper#view#VariablesPrinter#ScopeFromString(
    \ '> Local :')
  AssertEqual {
      \ 'expanded': 0,
      \ 'name': 'Local',
      \ 'info': ''
      \ }, g:parsed

Execute (VariablesPrinter: Parse Scope w/ Info):
  let g:parsed = dapper#view#VariablesPrinter#ScopeFromString(
    \ '> Local : 5 named, 8 indexed')
  AssertEqual {
      \ 'expanded': 0,
      \ 'name': 'Local',
      \ 'info': '5 named, 8 indexed'
      \ }, g:parsed

Given (Buffer Contents):
  <variables>
  v Local : 5 named, 8 indexed
    - foo, int: 123
    - bar, float: 3.14
    v quoz, Foo, {class}:
      - foo_, int, {property}: 456
      - bar_, string, {property}: "hello, world"
  > Middle : 8 named, 8 indexed
  v Global : 5 named, 8 indexed
    - foo, int: 234
    - bar, float: 6.28
    v quoz, Foo, {class}:
      - foo_, int, {property}: 567
      - bar_, string, {property}: "goodbye, world"
  </variables>

Execute (VariablesPrinter: Set Up, Create Buffer, Printer Object):
  let g:var_lookup = {
      \ 'VariableFromPath': { -> 0 }
      \ }
  let g:buffer = typevim#Buffer#New({'bufnr': bufnr('%')})
  let g:vp = dapper#view#VariablesPrinter#New(
      \ g:dapper_middletalker, g:buffer, g:var_lookup)

Execute (VariablesPrinter: GetRange, Scope):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:range = g:vp.GetRange(['Local'])
  AssertEqual [2, 7], g:range

  let g:range = g:vp.GetRange(['Middle'])
  AssertEqual [8, 8], g:range

  let g:range = g:vp.GetRange(['Global'])
  AssertEqual [9, 14], g:range

Execute (VariablesPrinter: GetRange, Scope That Doesn't Exist):
  call g:buffer.SetBuffer(bufnr('%'))
  AssertThrows call g:vp.GetRange(['ScopeyMcScopeface'])
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(NotFound)'),
      \ 'Threw wrong exception: '.g:vader_exception

Execute (VariablesPrinter: GetRange, Unstructured Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:range = g:vp.GetRange(['Local', 'foo'])
  AssertEqual [3, 3], g:range

Execute (VariablesPrinter: GetRange, Nested Unstructured Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:range = g:vp.GetRange(['Global', 'foo'])
  AssertEqual [10, 10], g:range

Execute (VariablesPrinter: GetRange, Nested Structured Member Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:range = g:vp.GetRange(['Global', 'quoz', 'bar_'])
  AssertEqual [14, 14], g:range

Execute (VariablesPrinter: GetRange, Nested Structured Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:range = g:vp.GetRange(['Global', 'quoz'])
  AssertEqual [12, 14], g:range

Execute (VariablesPrinter: GetRange, Variable Range Terminates with Scope):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:range = g:vp.GetRange(['Local', 'quoz'])
  AssertEqual [5, 7], g:range

Execute (VariablesPrinter: GetRange, Variable That Doesn't Exist):
  call g:buffer.SetBuffer(bufnr('%'))
  AssertThrows call g:vp.GetRange(['Middle', 'quoz', 'bar_'])
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(NotFound)'),
      \ 'Threw wrong exception: '.g:vader_exception

Execute (VariablesPrinter: VarFromCursor, Scope @ Top of Buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  normal! gg
  let g:path = g:vp.VarFromCursor(getcurpos(), 1)
  AssertEqual ['Local'], g:path

Execute (VariablesPrinter: VarFromCursor, Collapsed Scope in Middle of Buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  call search('> Middle')
  let g:path = g:vp.VarFromCursor(getcurpos(), 1)
  AssertEqual ['Middle'], g:path

Execute (VariablesPrinter: VarFromCursor, Nested Variable @ Buffer Bottom):
  call g:buffer.SetBuffer(bufnr('%'))
  normal! G
  let g:path = g:vp.VarFromCursor(getcurpos(), 1)
  AssertEqual ['Global', 'quoz', 'bar_'], g:path

Execute (VariablesPrinter: VarFromCursor, "Top-Level" Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  normal! 3G
  let g:path = g:vp.VarFromCursor(getcurpos(), 1)
  AssertEqual ['Local', 'foo'], g:path

Execute (VariablesPrinter: CollapseEntry, Local):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:success = g:vp.CollapseEntry(['Local'])
  AssertEqual 1, g:success
Expect:
  <variables>
  > Local : 5 named, 8 indexed
  > Middle : 8 named, 8 indexed
  v Global : 5 named, 8 indexed
    - foo, int: 234
    - bar, float: 6.28
    v quoz, Foo, {class}:
      - foo_, int, {property}: 567
      - bar_, string, {property}: "goodbye, world"
  </variables>

Execute (VariablesPrinter: CollapseEntry, Already Collapsed):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:success = g:vp.CollapseEntry(['Middle'])
  AssertEqual 0, g:success
Expect:
  <variables>
  v Local : 5 named, 8 indexed
    - foo, int: 123
    - bar, float: 3.14
    v quoz, Foo, {class}:
      - foo_, int, {property}: 456
      - bar_, string, {property}: "hello, world"
  > Middle : 8 named, 8 indexed
  v Global : 5 named, 8 indexed
    - foo, int: 234
    - bar, float: 6.28
    v quoz, Foo, {class}:
      - foo_, int, {property}: 567
      - bar_, string, {property}: "goodbye, world"
  </variables>

Execute (VariablesPrinter: CollapseEntry, Unstructured Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:success = g:vp.CollapseEntry(['Local', 'foo'])
  AssertEqual 0, g:success
Expect:
  <variables>
  v Local : 5 named, 8 indexed
    - foo, int: 123
    - bar, float: 3.14
    v quoz, Foo, {class}:
      - foo_, int, {property}: 456
      - bar_, string, {property}: "hello, world"
  > Middle : 8 named, 8 indexed
  v Global : 5 named, 8 indexed
    - foo, int: 234
    - bar, float: 6.28
    v quoz, Foo, {class}:
      - foo_, int, {property}: 567
      - bar_, string, {property}: "goodbye, world"
  </variables>

Execute (VariablesPrinter: CollapseEntry, Unstructured, Nested Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:success = g:vp.CollapseEntry(['Local', 'quoz', 'bar_'])
  AssertEqual 0, g:success
Expect:
  <variables>
  v Local : 5 named, 8 indexed
    - foo, int: 123
    - bar, float: 3.14
    v quoz, Foo, {class}:
      - foo_, int, {property}: 456
      - bar_, string, {property}: "hello, world"
  > Middle : 8 named, 8 indexed
  v Global : 5 named, 8 indexed
    - foo, int: 234
    - bar, float: 6.28
    v quoz, Foo, {class}:
      - foo_, int, {property}: 567
      - bar_, string, {property}: "goodbye, world"
  </variables>

Execute (VariablesPrinter: CollapseEntry, Structured Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:success = g:vp.CollapseEntry(['Local', 'quoz'])
  AssertEqual 1, g:success
Expect:
  <variables>
  v Local : 5 named, 8 indexed
    - foo, int: 123
    - bar, float: 3.14
    > quoz, Foo, {class}:
  > Middle : 8 named, 8 indexed
  v Global : 5 named, 8 indexed
    - foo, int: 234
    - bar, float: 6.28
    v quoz, Foo, {class}:
      - foo_, int, {property}: 567
      - bar_, string, {property}: "goodbye, world"
  </variables>

Given (Empty Buffer):

Execute (VariablesPrinter: Initialize Mock Debug Adapter, Retrieve Callstack, Local Scope):
  call AwaitTimeout({ -> ReceivedMessage('LaunchResponse')}, 4000, 1)
  call g:dapper_model.Update()
  call AwaitTimeout({ -> ReceivedMessage('ThreadsResponse')}, 3000, 1)
  let g:thread = g:dapper_model.thread(1)
  let g:callstack = AwaitPromise(g:thread.stackTrace(), 4000)
  let g:frame = AwaitPromise(g:callstack.frame(0), 4000)
  AssertEqual '#(0)', g:frame.name(), 'Failed to retrieve stackframe'
  let g:scope = AwaitPromise(g:frame.scope('Local'), 4000)

Execute (VariablesPrinter: Print Local Scope):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.ReplaceLines(1, -1,
      \ ['<variables>', '> Local : ', '</variables>']
      \ )
  call g:vp.ExpandEntry(['Local'], g:scope)
  sleep 100m
Expect:
  <variables>
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (VariablesPrinter: Print Local Scope, Smaller Recursion Depth):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.ReplaceLines(1, -1,
      \ ['<variables>', '> Local : ', '</variables>']
      \ )
  call g:vp.ExpandEntry(['Local'], g:scope, 2)
  sleep 100m
Expect:
  <variables>
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      > object__o, object: Object
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (VariablesPrinter: Print Local Scope, Then Expand):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.ReplaceLines(1, -1,
      \ ['<variables>', '> Local : ', '</variables>']
      \ )
  call g:vp.ExpandEntry(['Local'], g:scope)
  sleep 100m
  call g:vp.ExpandEntry(['Local', 'local_0_o', 'object__o'], g:scope)
  sleep 100m
Expect:
  <variables>
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (VariablesPrinter: ExpandEntry to Update a Single Variable):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.ReplaceLines(1, -1,
      \ ['<variables>', '> Local : ', '</variables>']
      \ )
  call g:vp.ExpandEntry(['Local'], g:scope, 2)
  sleep 100m
  call g:buffer.ReplaceLines(3, 3, ['  - local_0_f, float: 6.28'])
  " updating should restore the original value
  " rec_depth should have no effect
  let g:variables = AwaitPromise(g:scope.variables(), 4000)
  call g:vp.ExpandEntry(['Local', 'local_0_f'], g:variables.local_0_f, 20)
Expect:
  <variables>
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      > object__o, object: Object
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (VariablesPrinter: ExpandEntry to Update a Single Variable, w/ Explicit Value):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.ReplaceLines(1, -1,
      \ ['<variables>', '> Local : ', '</variables>']
      \ )
  call g:vp.ExpandEntry(['Local'], g:scope, 2)
  sleep 100m
  call g:buffer.ReplaceLines(3, 3, ['  - local_0_f, float: 6.28'])
  " updating should restore the original value
  " rec_depth should have no effect
  call g:vp.ExpandEntry(['Local', 'local_0_f'], {'value': '2.34'}, 20)
Expect:
  <variables>
  v Local : 
    - local_0_f, float: 2.34
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      > object__o, object: Object
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (Clean Up Old Variables Printer, Create Real One):
  " which used a mock VariableLookup object
  unlet g:vp
  unlet g:var_lookup
  let g:var_lookup = dapper#model#VariableLookup#New(g:dapper_middletalker, g:frame)
  let g:vp = dapper#view#VariablesPrinter#New(
      \ g:dapper_middletalker, g:buffer, g:var_lookup)

Execute (VariablesPrinter: Print All Scopes):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.ReplaceLines(1, -1,
      \ ['<variables>', '</variables>']
      \ )
  let g:scopes = g:frame.scopes()
  call g:vp.PrintScopes(g:scopes)
  sleep 1000m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    v global_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>
