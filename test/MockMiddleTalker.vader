Execute (Declare Mock MiddleTalker):
  let g:subs = []
  let g:reqs = []
  let g:msgs = []

  " mock middletalker
  function! MockSub(pattern, Callback) abort
    let g:last_sub = [a:pattern, a:Callback]
    let g:subs += [g:last_sub]
  endfunction

  function! MockReq(command, request_args, Callback) abort
    let g:last_req = [a:command, a:request_args, a:Callback]
    let g:reqs += [g:last_req]
  endfunction

  function! MockRec(msg) abort
    let g:last_rec = a:msg
    let g:msgs += [a:msg]
  endfunction

  function! MockNoOp(...) abort
  endfunction

  let g:mock_mt = {
    \ 'subscribe': function('MockSub'),
    \ 'unsubscribe': function('MockNoOp'),
    \ 'request': function('MockReq'),
    \ 'receive': function('MockNoOp'),
    \ 'notifyReport': function('dapper#MiddleTalker#notifyReport', g:dapper_middletalker),
  \ }

  function! MockCleanUp() abort
    let g:subs = []
    let g:reqs = []
    let g:msgs = []
  endfunction

  function! MockGotRequest(command) abort
    let l:i = 0 | while l:i <# len(g:reqs)
      if g:reqs[l:i][0] ==# a:command | return 1 | endif
    let l:i += 1 | endwhile
    return 0
  endfunction

  function! MockGotSubscription(pattern) abort
    let l:i = 0 | while l:i <# len(g:subs)
      if g:subs[l:i][0] ==# a:pattern | return 1 | endif
    let l:i += 1 | endwhile
    return 0
  endfunction

  function! MockReceived(pattern) abort
    let l:i = 0 | while l:i <# len(g:msgs)
      if g:msgs[l:i]['vim_msg_typename'] ==# a:pattern | return 1 | endif
    let l:i += 1 | endwhile
    return 0
  endfunction
