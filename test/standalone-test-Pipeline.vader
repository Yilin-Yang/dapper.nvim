Include: AwaitTimeout.vader
Include: StartMockDebugAdapter.vader
Include: SubscriptionHelpers.vader
Include: EnableProfiling.vader

Execute (Pipeline: setup Model, ThreadsBuffer; subscribe; initialize mock debug adapter):
  " get handle to this plugin
  let g:plugin = maktaba#plugin#Get('dapper.nvim')

  " setup ThreadsBuffer, which should (itself) subscribe
  let g:tb = dapper#view#ThreadsBuffer#New(g:dapper_model, g:dapper_middletalker)
  let g:plugin = maktaba#plugin#Get('dapper.nvim')
  call g:plugin.Flag('menu_expand_depth_on_map', 3)
  call g:plugin.Flag('menu_expand_depth_initial', 3)
  call g:plugin.Flag('preferred_scope_order', [])
  call g:plugin.Flag('expand_scopes_by_default', 1)
  call g:plugin.Flag('scopes_to_always_expand', [])
  call g:plugin.Flag('scopes_to_never_expand', [])

Execute (Pipeline: can launch a debuggee):
  call AwaitTimeout({ -> ReceivedMessage('LaunchResponse')}, 4000, 1)

Execute (Pipeline: can receive and show a ThreadsResponse):
  call g:dapper_model.Update()
  call g:tb.Open()
  call AwaitTimeout({ -> ReceivedMessage('ThreadsResponse')}, 3000, 1)
Expect:
  <threads>
  thread id: 1	name: thread 1		status: entry
  </threads>

Execute (Pipeline: can show a stack trace in a StackTraceBuffer):
  call g:tb.Open()
  normal! gg
  execute "normal \<cr>"
  call AwaitTimeout({ -> ReceivedMessage('StackTraceResponse')}, 4000, 1)
Expect:
  <stacktrace>
  (0)	[NO]	(l:1, c:0)	#(0)
  (1)	[NO]	(l:1, c:0)	Mock(1)
  (2)	[NO]	(l:1, c:0)	Debugger(2)
  (3)	[NO]	(l:1, c:0)	Source(3)
  (4)	[NO]	(l:1, c:0)	File(4)
  </stacktrace>

Execute (Pipeline: (Set Up) keep stacktracebuffer alive in another tab):
  " so that it isn't destroyed when it's out of view
  call g:tb.Open()
  normal! gg
  execute "normal \<cr>"
  sleep 10m
  let g:sb = b:dapper_buffer
  tabnew
  call g:sb.Open()
  tabprev

Execute (Pipeline: can retrieve a stack frame from callstack):
  let g:thread = g:dapper_model.thread(1)
  let g:callstack = AwaitPromise(g:thread.stackTrace(), 4000)
  let g:frame_promise = g:callstack.frame(0)
  " echo typevim#object#PrettyPrint(g:frame)
  call AwaitTimeout({ -> g:frame_promise.State() ==# 'fulfilled'}, 4000, 1)
  let g:frame = g:frame_promise.Get()
  AssertEqual '#(0)', g:frame.name()

Execute (Pipeline: retrieve the "Local" scope from a stack frame):
  let g:scope_promise = g:frame.scope('Local')
  call AwaitTimeout({ -> g:scope_promise.State() ==# 'fulfilled'}, 4000, 1)
  let g:scope = g:scope_promise.Get()
  let g:variables_promise = g:scope.variables()
  call AwaitTimeout({ -> g:variables_promise.State() ==# 'fulfilled'}, 4000, 1)
  let g:variables = g:variables_promise.Get()
  let g:local_int = g:variables['local_0_i']
  AssertEqual 'local_0_i', g:local_int.name()
  AssertEqual 'integer', g:local_int.type()
  AssertEqual '123', g:local_int.value()
Then (Check Values in Structured Variable):
  let g:object_top = g:variables['local_0_o']
  AssertEqual 'local_0_o', g:object_top.name()

  " block until children are populated
  let g:child_promise = g:object_top.Children()
  call AwaitTimeout({ -> g:child_promise.State() ==# 'fulfilled'}, 4000, 1)

  let g:var = AwaitPromise(g:object_top.Child('object__i'), 4000)
  AssertEqual 'object__i', g:var.name()
  AssertEqual 'integer',   g:var.type()
  AssertEqual '123',       g:var.value()

  let g:var = AwaitPromise(g:object_top.Child('object__f'), 4000)
  AssertEqual 'object__f', g:var.name()
  AssertEqual 'float',     g:var.type()
  AssertEqual '3.14',      g:var.value()

  let g:var = AwaitPromise(g:object_top.Child('object__s'), 4000)
  AssertEqual 'object__s',   g:var.name()
  AssertEqual 'string',      g:var.type()
  AssertEqual 'hello world', g:var.value()

Execute (Pipeline: can show accessible variables in a VariablesBuffer):
  call g:sb.Open()
  let g:vb = dapper#view#VariablesBuffer#New(g:dapper_middletalker)
  call g:sb.AddChild(g:vb)
  call g:vb.SetParent(g:sb)
  tabnew
  call g:vb.Open()
  tabprev
  normal! 2G

  execute "normal \<cr>"
  call AwaitTimeout({ -> ReceivedMessage('ScopesResponse')}, 4000, 1)
  sleep 10m

Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    v global_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (Pipeline: can totally collapse scopes):
  call g:vb.Open()
  execute "normal \<BS>"
  normal! 3G
  execute "normal \<BS>"
  sleep 10m
Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>

Execute (Pipeline: can expand scopes):
  call g:vb.Open()
  normal! 2G
  execute "normal \<CR>"
  sleep 10m
  normal! 15G
  execute "normal \<CR>"
  sleep 10m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    v global_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (Pipeline: can collapse particular variables):
  call g:vb.Open()
  normal! 5G
  execute "normal \<BS>"
  sleep 10m
  normal! 7G
  execute "normal \<BS>"
  sleep 10m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    > global_0_o, object: Object
    - global_0_s, string: hello world
  > Local : 
  </variables>

Execute (Pipeline: can re-expand those collapsed variables):
  call g:vb.Open()
  normal! 5G
  execute "normal \<CR>"
  sleep 10m
  normal! 23G
  execute "normal \<CR>"
  sleep 10m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    v global_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        v object__o, object: Object
          - object__f, float: 3.14
          - object__i, integer: 123
          > object__o, object: Object
          - object__s, string: hello world
        - object__s, string: hello world
      - object__s, string: hello world
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>


Execute (Pipeline: can collapse by selecting an unstructured variable):
  call g:vb.Open()
  call g:plugin.Flag('menu_expand_depth_on_map', 1)

  normal! 17G
  execute "normal \<BS>"
  sleep 10m

  normal! 9G
  execute "normal \<BS>"
  sleep 10m

Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    > global_0_o, object: Object
    - global_0_s, string: hello world
  > Local : 
  </variables>

Execute (Pipeline: can collapse by selecting an already-collapsed variable):
  call g:vb.Open()

  normal! 5G
  execute "normal \<BS>"
  sleep 10m

Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>

Execute (Pipeline: can fully collapse everything again):
  call g:vb.Open()

  normal! 2G
  execute "normal \<BS>"
  sleep 10m

  normal! 3G
  execute "normal \<BS>"
  sleep 10m
Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>

Execute (Pipeline: can change mapping expansion depth at runtime):
  call g:vb.Open()
  let g:plugin = maktaba#plugin#Get('dapper.nvim')
  call g:plugin.Flag('menu_expand_depth_on_map', 1)

  normal! gg
  execute "normal \<CR>"
  sleep 10m

  normal! 7G
  execute "normal \<CR>"
  sleep 10m

Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    > global_0_o, object: Object
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    > local_0_o, object: Object
    - local_0_s, string: hello world
  </variables>

Execute (Pipeline: can initialize a VariablesBuffer with expansion depth 0):
  call g:plugin.Flag('menu_expand_depth_initial', 0)
  call g:sb.Open()
  normal! 3G
  execute "normal \<cr>"
  call AwaitTimeout({ -> ReceivedMessage('ScopesResponse')}, 4000, 1)
  sleep 10m
Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>

Execute (Pipeline: can return to a previous stack frame and find it unchanged):
  call sb.Open()
  normal! 2G
  execute "normal \<cr>"
  sleep 10m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    > global_0_o, object: Object
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    > local_0_o, object: Object
    - local_0_s, string: hello world
  </variables>

Execute (Pipeline: ditto, with yet another stack frame):
  call sb.Open()
  normal! 3G
  execute "normal \<cr>"
  sleep 10m
Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>
