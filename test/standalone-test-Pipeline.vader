Include: AwaitTimeout.vader
Include: StartMockDebugAdapter.vader
Include: SubscriptionHelpers.vader

Execute (Pipeline: Setup Model, ThreadsBuffer; Subscribe; Initialize Mock Debug Adapter):
  let g:model = dapper#model#Model#New(g:dapper_middletalker)

  " setup ThreadsBuffer, which should (itself) subscribe
  if exists('g:tb') | unlet g:tb | endif
  let g:tb = dapper#view#ThreadsBuffer#New(g:model, g:dapper_middletalker)

Execute (Pipeline: Launch Debuggee):
  call AwaitTimeout({ -> ReceivedMessage('LaunchResponse')}, 4000, 1)

Execute (Pipeline: Request Threads):
  call g:model.Update()
  call g:tb.Open()
  call AwaitTimeout({ -> ReceivedMessage('ThreadsResponse')}, 3000, 1)
Expect:
  <threads>
  thread id: 1	name: thread 1		status: (N/A)
  </threads>

Execute (Pipeline: Create A Free, Unattached StackTraceBuffer):
  let g:stb = dapper#view#StackTraceBuffer#new(g:dapper_middletalker)
Execute (Pipeline: Dig Down into StackTraceBuffer):
  call g:tb.Open()
  normal! gg
  execute "normal \<cr>"
Expect:
  <stacktrace>
  (0)	[NO]	(l:8, c:0)	The(0)
  (1)	[NO]	(l:8, c:0)	word(1)
  (2)	[NO]	(l:8, c:0)	`exception`(2)
  (3)	[NO]	(l:8, c:0)	causes(3)
  (4)	[NO]	(l:8, c:0)	the(4)
  (5)	[NO]	(l:8, c:0)	mock(5)
  (6)	[NO]	(l:8, c:0)	debugger(6)
  (7)	[NO]	(l:8, c:0)	to(7)
  (8)	[NO]	(l:8, c:0)	stop,(8)
  (9)	[NO]	(l:8, c:0)	due(9)
  (10)	[NO]	(l:8, c:0)	to(10)
  (11)	[NO]	(l:8, c:0)	an(11)
  (12)	[NO]	(l:8, c:0)	"exception".(12)
  </stacktrace>

Execute(Pipeline: Check That Only the Child StackTraceBuffer Was Modified):
  AssertEqual 0, len(g:stb.getLines(0, -1))

Execute (Pipeline: Cleanup):
  call g:tb.Open()
  normal!ggVGd
  unlet g:tb
