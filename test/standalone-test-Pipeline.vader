Include: AwaitTimeout.vader
Include: StartMockDebugAdapter.vader
Include: SubscriptionHelpers.vader
Include: EnableProfiling.vader

Execute (Pipeline: Setup Model, ThreadsBuffer; Subscribe; Initialize Mock Debug Adapter):
  " setup ThreadsBuffer, which should (itself) subscribe
  let g:tb = dapper#view#ThreadsBuffer#New(g:dapper_model, g:dapper_middletalker)
  let g:plugin = maktaba#plugin#Get('dapper.nvim')
  call g:plugin.Flag('menu_expand_depth_on_map', 3)
  call g:plugin.Flag('menu_expand_depth_initial', 3)

Execute (Pipeline: Launch Debuggee):
  call AwaitTimeout({ -> ReceivedMessage('LaunchResponse')}, 4000, 1)

Execute (Pipeline: Request Threads):
  call g:dapper_model.Update()
  call g:tb.Open()
  call AwaitTimeout({ -> ReceivedMessage('ThreadsResponse')}, 3000, 1)
Expect:
  <threads>
  thread id: 1	name: thread 1		status: entry
  </threads>

Execute (Pipeline: Dig Down into StackTraceBuffer):
  call g:tb.Open()
  normal! gg
  execute "normal \<cr>"
  call AwaitTimeout({ -> ReceivedMessage('StackTraceResponse')}, 4000, 1)
Expect:
  <stacktrace>
  (0)	[NO]	(l:1, c:0)	#(0)
  (1)	[NO]	(l:1, c:0)	Mock(1)
  (2)	[NO]	(l:1, c:0)	Debugger(2)
  (3)	[NO]	(l:1, c:0)	Source(3)
  (4)	[NO]	(l:1, c:0)	File(4)
  </stacktrace>

Execute (Pipeline: Get Stack Frame from Callstack):
  let g:thread = g:dapper_model.thread(1)
  let g:callstack = AwaitPromise(g:thread.stackTrace(), 4000)
  let g:frame_promise = g:callstack.frame(0)
  " echo typevim#object#PrettyPrint(g:frame)
  call AwaitTimeout({ -> g:frame_promise.State() ==# 'fulfilled'}, 4000, 1)
  let g:frame = g:frame_promise.Get()
  AssertEqual '#(0)', g:frame.name()

Execute (Pipeline: Get Local Scope from Stack Frame):
  let g:scope_promise = g:frame.scope('Local')
  call AwaitTimeout({ -> g:scope_promise.State() ==# 'fulfilled'}, 4000, 1)
  let g:scope = g:scope_promise.Get()
  let g:variables_promise = g:scope.variables()
  call AwaitTimeout({ -> g:variables_promise.State() ==# 'fulfilled'}, 4000, 1)
  let g:variables = g:variables_promise.Get()
  let g:local_int = g:variables['local_0_i']
  AssertEqual 'local_0_i', g:local_int.name()
  AssertEqual 'integer', g:local_int.type()
  AssertEqual '123', g:local_int.value()
Then (Check Values in Structured Variable):
  let g:object_top = g:variables['local_0_o']
  AssertEqual 'local_0_o', g:object_top.name()

  " block until children are populated
  let g:child_promise = g:object_top.Children()
  call AwaitTimeout({ -> g:child_promise.State() ==# 'fulfilled'}, 4000, 1)

  let g:var = AwaitPromise(g:object_top.Child('object__i'), 4000)
  AssertEqual 'object__i', g:var.name()
  AssertEqual 'integer',   g:var.type()
  AssertEqual '123',       g:var.value()

  let g:var = AwaitPromise(g:object_top.Child('object__f'), 4000)
  AssertEqual 'object__f', g:var.name()
  AssertEqual 'float',     g:var.type()
  AssertEqual '3.14',      g:var.value()

  let g:var = AwaitPromise(g:object_top.Child('object__s'), 4000)
  AssertEqual 'object__s',   g:var.name()
  AssertEqual 'string',      g:var.type()
  AssertEqual 'hello world', g:var.value()

Execute (Pipeline: Dig Down Into VariablesBuffer):
  call g:tb.Open()
  normal! 2G
  execute "normal \<cr>"
  let g:sb = b:dapper_buffer
  let g:vb = dapper#view#VariablesBuffer#New(g:dapper_middletalker)
  call g:sb.AddChild(g:vb)
  call g:vb.SetParent(g:sb)
  normal! 2G


  " NOTE: There may(?) be a bug in neovim itself that causes changes made
  " to the VariablesBuffer to not be visible to some of the function calls in
  " the async waterfall.
  "
  " This doesn't seem to substantially affect functionality, since afterwards,
  " the affected variable can still be expanded and collapsed normally. For now,
  " hack around the test failure by backing up into the StackTraceBuffer, then
  " digging back down into the VariablesBuffer (so that it can 'try again').
  execute "normal \<cr>"
  call AwaitTimeout({ -> ReceivedMessage('ScopesResponse')}, 4000, 1)
  execute "normal \<bs>"
  execute "normal \<cr>"
  sleep 100m

Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    v global_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (Pipeline: Collapse Scopes):
  call g:vb.Open()
  execute "normal \<BS>"
  normal! 3G
  execute "normal \<BS>"
  sleep 100m
Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>

Execute (Pipeline: Expand Scopes):
  call g:vb.Open()
  normal! 2G
  execute "normal \<CR>"
  sleep 100m
  normal! 15G
  execute "normal \<CR>"
  sleep 100m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    v global_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>

Execute (Pipeline: Collapse Variables):
  call g:vb.Open()
  normal! 5G
  execute "normal \<BS>"
  sleep 100m
  normal! 7G
  execute "normal \<BS>"
  sleep 100m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    > global_0_o, object: Object
    - global_0_s, string: hello world
  > Local : 
  </variables>

Execute (Pipeline: Re-Expand Variables):
  call g:vb.Open()
  let g:plugin = maktaba#plugin#Get('dapper.nvim')
  normal! 5G
  execute "normal \<CR>"
  sleep 100m
  normal! 23G
  execute "normal \<CR>"
  sleep 100m
Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    v global_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        v object__o, object: Object
          - object__f, float: 3.14
          - object__i, integer: 123
          > object__o, object: Object
          - object__s, string: hello world
        - object__s, string: hello world
      - object__s, string: hello world
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    v local_0_o, object: Object
      - object__f, float: 3.14
      - object__i, integer: 123
      v object__o, object: Object
        - object__f, float: 3.14
        - object__i, integer: 123
        > object__o, object: Object
        - object__s, string: hello world
      - object__s, string: hello world
    - local_0_s, string: hello world
  </variables>


Execute (Pipeline: Collapse with an Unstructured Variable Selected):
  call g:vb.Open()
  let g:plugin = maktaba#plugin#Get('dapper.nvim')
  call g:plugin.Flag('menu_expand_depth_on_map', 1)

  normal! 17G
  execute "normal \<BS>"
  sleep 100m

  normal! 9G
  execute "normal \<BS>"
  sleep 100m

Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    > global_0_o, object: Object
    - global_0_s, string: hello world
  > Local : 
  </variables>

Execute (Pipeline: Collapse with an Already-Collapsed Variable Selected):
  call g:vb.Open()

  normal! 5G
  execute "normal \<BS>"
  sleep 100m

Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>

Execute (Pipeline: Fully Collapse Again):
  call g:vb.Open()

  normal! 2G
  execute "normal \<BS>"
  sleep 100m

  normal! 3G
  execute "normal \<BS>"
  sleep 100m
Expect:
  <variables>
  > Global : 
  > Local : 
  </variables>

Execute (Pipeline: Re-Expand, at a Shallower Depth):
  call g:vb.Open()
  let g:plugin = maktaba#plugin#Get('dapper.nvim')
  call g:plugin.Flag('menu_expand_depth_on_map', 1)

  normal! gg
  execute "normal \<CR>"
  sleep 100m

  normal! 7G
  execute "normal \<CR>"
  sleep 100m

Expect:
  <variables>
  v Global : 
    - global_0_f, float: 3.14
    - global_0_i, integer: 123
    > global_0_o, object: Object
    - global_0_s, string: hello world
  v Local : 
    - local_0_f, float: 3.14
    - local_0_i, integer: 123
    > local_0_o, object: Object
    - local_0_s, string: hello world
  </variables>
