*dapper.nvim.txt*	neovim frontend for Microsoft's Debug Adapter Protocol.
Yilin Yang <yiliny@umich.edu>                      *dapper.nvim* *dapper.nvim*

==============================================================================
CONTENTS                                                *dapper.nvim-contents*
  1. Introduction..........................................|dapper.nvim-intro|
  2. Configuration........................................|dapper.nvim-config|
  3. Dictionaries..........................................|dapper.nvim-dicts|
  4. Functions.........................................|dapper.nvim-functions|

==============================================================================
INTRODUCTION                                               *dapper.nvim-intro*

A neovim frontend for Microsoft's Debug Adapter Protocol, or, a concerted
effort to take the best features of Microsoft's VSCode test editor and crudely
staple them onto neovim.

==============================================================================
CONFIGURATION                                             *dapper.nvim-config*

This plugin uses maktaba flags for configuration. Install Glaive
(https://github.com/google/glaive) and use the |:Glaive| command to configure
them.

                                                *dapper.nvim:plugin[mappings]*
Configures whether plugin/mappings.vim should be loaded.
Default: 0 `

==============================================================================
DICTIONARIES                                               *dapper.nvim-dicts*

                                                    *dapper.nvim.DapperBuffer*
A Buffer, with additional methods for use in the dapper UI.

In addition to encapsulating a buffer, a `DapperBuffer` also:

Acts as a parent or child to other `DapperBuffer`s, allowing `DapperBuffer`s
  to organize as a tree: UI updates and information about for 'digging down'
  from one level of information to another (e.g. from a list of all running
  threads to a stack trace for a particular thread), and for 'climbing up'
  from that deeper level back to the parent level.

                                                   *dapper.nvim.DapperMessage*
A Debug Adapter Protocol message, annotated with a human-readable (and
|dapper.nvim.MiddleTalker|-parsable) typename, and possibly the ID of a
frontend object.

                                                    *dapper.nvim.DapperReport*
A "custom" message type used by dapper.nvim, patterned off of the messages of
the Debug Adapter Protocol. Used for sending information, updates, error
messages, etc. to the frontend.

DapperReport.New([kind], [brief], [Long], [Other])        *DapperReport.New()*

  Construct a DapperReport object.

  [Long] and [Other] may both be non-string objects; if they are, then they
  will be pretty-printed to strings on construction.

                                              *dapper.nvim.DebugAdapterConfig*
Basic startup configuration for a debug adapter.

`adapter_id` appears to be the value of `type` in `launch.json`.

dapper#config#DebugAdapterConfig#New({runtime_env} {exe_filepath}
  {adapter_id})                                     *DebugAdapterConfig.New()*
  Construct a new DebugAdapterConfig object.

  {runtime_env} is the environment in which to run the debug adapter, e.g.
  `"node"`, `"python3"`.

  {exe_filepath} is the filepath of the debug adapter.

  {adapter_id} is equivalent to the `type` attribute of a `launch.json` file.

  Throws ERROR(WrongType) if any of the arguments above are not strings.

                                                     *dapper.nvim.DebugLogger*
A global debug logger. Writes incoming |dapper.nvim.DapperReport|s to a log
buffer and, optionally, a logfile just before vim exits.

Is a wrapper around dapper.nvim's maktaba-provided plugin-wide debug logger.

Public member variables include `buffer`, which is the |TypeVim.Buffer| object
wrapping the DebugLogger's log buffer.

dapper#log#DebugLogger#Interface()                   *DebugLogger.Interface()*
  Returns the interface that DebugLogger implements.

DebugLogger.Get()                                          *DebugLogger.Get()*
  Return a reference to the DebugLogger singleton.

DebugLogger.CleanUp()                                  *DebugLogger.CleanUp()*
  Write the debug log to an output file, if configured to do so.

DebugLogger.Log({report})                                  *DebugLogger.Log()*
  Append a {report} to the dapper-specific debug log.

  Does not log to dapper.nvim's maktaba debugger interface. For that, see
  |DebugLogger.NotifyReport()|.

  Throws ERROR(BadValue) if the given {report} is not a dict.
  Throws ERROR(WrongType) if the given {report} is not a
  |dapper.nvim.DapperReport|.

DebugLogger.ListifyReport({report})              *DebugLogger.ListifyReport()*
  Convert the given {report} instance into a list printable through functions
  like |append()| and return it.

  Throws ERROR(BadValue) if {report} is not a dict.
  Throws ERROR(WrongType) if {report} is not a |dapper.nvim.DapperReport|
  object.

DebugLogger.NotifyReport({kind}, {brief}, [long], [other])
                                                  *DebugLogger.NotifyReport()*
  Make a report. Log it to dapper.nvim's maktaba logger interface, which might
  shout the message at the user. Also append it to the debug log.

  {kind} is the type of report. These correspond one-to-one with the
  |maktaba.Logger| log levels. This is not case sensitive.

  {brief} is a short (50 characters or less) summary of the report. If this is
  longer than 50 characters, it will be truncated automatically.

  [long] is the verbose content of the message.

  [other] is any other miscellaneous information about the report.

  All optional arguments are pretty-printed into strings, regardless of their
  original type.

  Throws ERROR(BadValue) if {kind} is not a |maktaba.Logger| level.
  Throws ERROR(WrongType) if {kind} or {brief} are not strings.

                                                     *dapper.nvim.DebugSource*

                                                    *dapper.nvim.DebuggeeArgs*
Arguments for starting the debuggee process.

DebuggeeArgs.New({request}, {name})                       *DebuggeeArgs.New()*
  Construct a DebuggeeArgs object.

  {request} is either `"launch"` or `"attach"`.

  {name} is a "human-friendly" name for this debug adapter configuration.

  Throws ERROR(WrongType) if {request} or {name} aren't strings.

                                              *dapper.nvim.InitialBreakpoints*
Breakpoints to be set immediately after launching a debuggee process.

                                                    *dapper.nvim.MiddleTalker*
The connection between dapper.nvim's VimL frontend and its TypeScript
"middle-end". Provides a subscription-based interface for sending requests to
and receiving messages from the middle-end through neovim's remote plugin
|RPC|, in a manner comparable to a Node.js-style `EventEmitter` object.

Objects can subscribe to messages whose `"vim_msg_typename"` matches a given
regex pattern: MiddleTalker will, on receiving a matching message, call the
subscriber's provided callback function with that matching message. Objects
may also send requests: MiddleTalker will note the sender of the request, and
if it receives a response, will return that request to the sender (and to any
other objects subscribed to messages of that type).

MiddleTalker is a singleton. Because MiddleTalker encapsulates neovim's
program-wide RPC, it does not make sense to have multiple MiddleTalker
instances at a given time.

dapper#MiddleTalker#Interface()                     *MiddleTalker.Interface()*
  Returns the interface that MiddleTalker implements.

dapper#MiddleTalker#get()                                 *MiddleTalker.Get()*
  Get the MiddleTalker singleton, or make one if it doesn't yet exist.

MiddleTalker.__GetID()                                *MiddleTalker.__GetID()*
  Return a request ID number, guaranteed to be distinct from those of all
  existing requests.

MiddleTalker.Receive({msg})                           *MiddleTalker.Receive()*
  Receive a response or event {msg}, passing it to subscribers.
  Throws ERROR(WrongType) if {msg} is not a dictionary, or if {msg} is not a
  |dapper.nvim.DapperMessage|.

MiddleTalker.Request({command}, {request_args}, {Callback})
                                                      *MiddleTalker.Request()*
  Make a request of the debug adapter. {command} is the `"command"` property
  of a DAP Request; {request_args} is the `"[blank]RequestArguments"` object
  associated with that request type; and {Callback} is the function that the
  MiddleTalker should call after receiving a response to this request.

  Throws ERROR(WrongType) if {command} is not a string, {request_args} is not
  a dict, or if {Callback} is not a |Funcref|.

MiddleTalker.Subscribe({name_pattern}, {Callback})  *MiddleTalker.Subscribe()*
  Register a subscription to messages whose typenames match a {name_pattern},
  a regular expression used to |string-match| against the `"vim_msg_typename"`
  of an incoming message. `"vim_msg_typename"` is a construct of dapper.nvim,
  not of the DAP itself: the middle-end annotates front-going DAP messages
  with a straightforward "human-readable" typename (e.g. a
  LaunchRequestArgument has the `"vim_msg_typename"`:
  `"LaunchRequestArgument"`).

  When {name_pattern} matches against an incoming messages
  `"vim_msg_typename"`, the MiddleTalker will call {Callback}.

  Throws ERROR(WrongType) if {name_pattern} is not a string, or if {Callback}
  is not a |Funcref|.

MiddleTalker.Unsubscribe({name_pattern}, {Callback})
                                                  *MiddleTalker.Unsubscribe()*
  Cancel a subscription, returning 1 when a matching subscription was
  successfully removed, and 0 otherwise.

  {name_pattern} and {Callback} are exactly the same as in
  |MiddleTalker.Subscribe()|; in fact, they should be exactly the same as the
  original arguments (i.e. should compare equal by |expr-==#|) provided when
  the subscription was originally registered.

  Throws ERROR(WrongType) if {name_pattern} is not a string, or if {Callback}
  is not a |Funcref|.

MiddleTalker.NotifyReport({kind}, {brief}, [long], [alert], [other])
                                                 *MiddleTalker.NotifyReport()*
  Pass a |dapper.nvim.DapperReport| to the attached |dapper.nvim.DebugLogger|,
  while also sending it to the appropriate subscribers.

                                                           *dapper.nvim.Model*
Encapsulates the state of the debugging process.

Model is primarily responsible for managing the VimL frontend's knowledge of
the debugger's state. It sends `ThreadsRequest`s in response to `ThreadEvent`s
and `StoppedEvent`s, and starts the "request waterfall" described by the Debug
Adapter Protocol specification overview.

Only objects in the `dapper#model` namespace should directly modify the model
state. (`dapper#view` objects can modify the model state indirectly, by
sending DebugProtocol.Request messages.)

dapper#model#Model#Interface()                             *Model.Interface()*
  Returns the interface that Model implements.

Model.Update()                                                *Model.Update()*
  Prompt the Model to update its contents.

Model.thread({tid})                                           *Model.thread()*
  Returns a Thread model object with the requested numerical {tid}.
  Throws ERROR(NotFound) if a matching thread can't be found.
  Throws ERROR(WrongType) if {tid} isn't a number.

Model.threads([include_exited])                              *Model.threads()*
  Returns a dictionary of numerical thread IDs to all stored threads. If
  [include_exited] is true, the returned dictionary will also include stopped
  threads.

  [include_exited] is 0 if omitted.
  Throws ERROR(WrongType) if [include_exited] is not a bool.

Model.capabilities()                                    *Model.capabilities()*
  Returns the capabilities of the running debug adapter.

  Throws ERROR(NotFound) if capabilities have not yet been received.

Model.Receive({msg})                                         *Model.Receive()*
  Update from incoming Debug Adapter Protocol messages.

  Throws ERROR(WrongType) if {msg} is not a dict, or if it is not a
  |dapper.nvim.DapperMessage|.

                                                     *dapper.nvim.RequestDoer*
Sends the given {command} with the given {request_args} and resolves with the
results.

                                                       *dapper.nvim.StartArgs*
All arguments supplied to the middle-end. When provided in a call to
|DapperStart()|, starts a debug adapter and a debuggee.

dapper#config#StartArgs#New({adapter_config}, {debuggee_args}, {vscode_attr},
  [locale])                                                  *StartArgs.New()*
  Construct and return new StartArgs object.

  {adapter_config} is a |dapper.nvim.DebugAdapterConfig| object, acting as
  configuration for the debug adapter itself.

  {debuggee_args} is a |dapper.nvim.DebuggeeArgs| object: the debug adapter
  reads this, and uses it to launch or attach to a debugger process.

  {vscode_attr} is a |dapper.nvim.VSCodeAttributes| object, or a basic
  dictionary: it contains other attributes from a `.vscode/launch.json` file
  used specifically by VSCode itself.

  [locale] is a string containing the ISO-639 locale of the neovim frontend,
  e.g. `en_US`.

  Throws ERROR(WrongType) if any of the arguments mentioned above are not of
  the specified types.

                                                   *dapper.nvim.ThreadsBuffer*
Shows active threads in the debuggee; 'digs down' into callstacks.

                                                *dapper.nvim.VSCodeAttributes*
Settings from a `launch.json` that normally control VSCode-specific behavior,
e.g.  `"preLaunchTask"`, `"postLaunchTask"`, `"internalConsoleOptions"` and
`"debugServer"`.

dapper#config#VSCodeAttributes#New()                  *VSCodeAttributes.New()*
  Construct and return a VSCodeAttributes object.

==============================================================================
FUNCTIONS                                              *dapper.nvim-functions*


vim:tw=78:ts=8:ft=help:norl:
